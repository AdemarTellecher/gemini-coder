{
  "name": "gemini-coder",
  "displayName": "Gemini Coder: Autocomplete with 1M context",
  "description": "Take advantage of 1 million token context window and use Gemini as your Fill-in-the-middle coding assistant. Manually select all folders you want to attach in each request and get the best code completions possible.",
  "version": "1.0.20",
  "publisher": "robertpiosik",
  "repository": {
    "type": "git",
    "url": "https://github.com/robertpiosik/gemini-vscode"
  },
  "engines": {
    "vscode": "^1.92.0"
  },
  "categories": [
    "Other"
  ],
  "keywords": [
    "gemini",
    "ai",
    "Autocomplete",
    "Fill-in-the-middle",
    "FIM",
    "Coding assistant",
    "OpenAI API"
  ],
  "activationEvents": [
    "onView.geminiCoderView"
  ],
  "main": "out/extension.js",
  "icon": "media/thumbnail.png",
  "contributes": {
    "viewsContainers": {
      "activitybar": [
        {
          "id": "geminiCoder",
          "title": "Gemini Coder",
          "icon": "resources/activity-bar-icon.svg"
        }
      ]
    },
    "views": {
      "geminiCoder": [
        {
          "id": "geminiCoderView",
          "name": "Context"
        }
      ]
    },
    "commands": [
      {
        "command": "geminiCoder.copyContext",
        "title": "Copy context",
        "icon": {
          "light": "resources/light/copy.svg",
          "dark": "resources/dark/copy.svg"
        }
      },
      {
        "command": "geminiCoder.clearChecks",
        "title": "Clear all checks",
        "icon": {
          "light": "resources/light/clear.svg",
          "dark": "resources/dark/clear.svg"
        }
      },
      {
        "command": "geminiCoder.copyOpenFiles",
        "title": "Gemini Coder: Copy Context of Open Files"
      },
      {
        "command": "geminiCoder.sendCompletionRequestPrimary",
        "title": "Gemini Coder: Autocomplete with Primary Provider"
      },
      {
        "command": "geminiCoder.sendCompletionRequestSecondary",
        "title": "Gemini Coder: Autocomplete with Secondary Provider"
      },
      {
        "command": "geminiCoder.changeDefaultProvider",
        "title": "Gemini Coder: Change Default Provider"
      }
    ],
    "menus": {
      "view/title": [
        {
          "command": "geminiCoder.copyContext",
          "when": "view == geminiCoderView",
          "group": "navigation@1"
        },
        {
          "command": "geminiCoder.clearChecks",
          "when": "view == geminiCoderView",
          "group": "navigation@3"
        }
      ],
      "editor/context": [
        {
          "command": "geminiCoder.sendCompletionRequestPrimary",
          "when": "editorTextFocus && !editorReadonly",
          "group": "navigation@10"
        },
        {
          "command": "geminiCoder.sendCompletionRequestSecondary",
          "when": "editorTextFocus && !editorReadonly",
          "group": "navigation@11"
        }
      ]
    },
    "configuration": {
      "type": "object",
      "title": "Gemini Coder Settings",
      "properties": {
        "geminiCoder.primaryProvider": {
          "type": "string",
          "description": "The primary model to use.",
          "default": "Gemini Flash"
        },
        "geminiCoder.secondaryProvider": {
          "type": "string",
          "description": "The secondary model to use.",
          "default": "Gemini Pro"
        },
        "geminiCoder.apiKey": {
          "type": "string",
          "scope": "resource",
          "description": "API key to use with built-in Gemini models. Get yours here: https://aistudio.google.com/app/apikey",
          "default": ""
        },
        "geminiCoder.temperature": {
          "type": "number",
          "scope": "resource",
          "description": "Temperature to use with built-in Gemini models.",
          "default": 0
        },
        "geminiCoder.providers": {
          "type": "array",
          "default": [],
          "description": "Configure additional models via OpenAI API compatible providers.",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "A friendly name for the provider."
              },
              "endpointUrl": {
                "type": "string",
                "description": "Endpoint URL."
              },
              "bearerToken": {
                "type": "string",
                "description": "API key."
              },
              "model": {
                "type": "string",
                "description": "Model name."
              },
              "temperature": {
                "type": "number",
                "description": "Temperature."
              },
              "systemInstructions": {
                "type": "string",
                "description": "The system instructions."
              },
              "instruction": {
                "type": "string",
                "description": "Custom FIM instruction."
              }
            }
          }
        },
        "geminiCoder.verbose": {
          "type": "boolean",
          "default": false,
          "description": "Enable verbose logging."
        },
        "geminiCoder.attachOpenFiles": {
          "type": "boolean",
          "default": true,
          "description": "Attach all open files to the request."
        },
        "geminiCoder.globalInstruction": {
          "type": "string",
          "description": "A global instruction used if a provider does not specify its own.",
          "default": "The following text is a Git repository with code. Somewhere in the repository you will encounter <fill missing code> symbol. Send nothing more than missing code. Format text in plain text."
        },
        "geminiCoder.ignoredExtensions": {
          "type": "string",
          "description": "Comma-separated list of file extensions to ignore during recursive scan for context files. Example: 'png,jpg,jpeg,gif,svg'",
          "default": "png,jpg,jpeg,gif,svg"
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src"
  },
  "devDependencies": {
    "@types/mocha": "^10.0.9",
    "@types/node": "20.x",
    "@types/vscode": "^1.92.0",
    "@typescript-eslint/eslint-plugin": "^8.10.0",
    "@typescript-eslint/parser": "^8.7.0",
    "@vscode/test-cli": "^0.0.10",
    "@vscode/test-electron": "^2.4.1",
    "eslint": "^9.13.0",
    "typescript": "^5.6.3"
  },
  "dependencies": {
    "axios": "^1.7.7",
    "ignore": "^6.0.2",
    "openai-gpt-token-counter": "^1.1.1"
  }
}
